document.addEventListener('DOMContentLoaded', () => {
    const chatMessages = document.getElementById('chat-messages');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');

    const FREE_APIS = {
        WIKIPEDIA: '/api/wikipedia?q=',
        SPELLCHECK: (word) => `/api/spellcheck?word=${word}`
    };

    const LOCAL_KNOWLEDGE = {
        greetings: {
            patterns: [/merhaba/i, /selam/i, /hey/i, /hi/i, /naber/i, /mrhb/i, /slm/i, /hola/i, /gÃ¼naydÄ±n/i, /iyi gÃ¼nler/i, /selamlar/i],
            responses: [
                "Merhaba! Size nasÄ±l yardÄ±mcÄ± olabilirim? ğŸ˜Š",
                "Selamlar! Ben Ultimate SKY AI, sorularÄ±nÄ±zÄ± yanÄ±tlamak iÃ§in buradayÄ±m.",
                "HoÅŸ geldiniz! Bana istediÄŸinizi sorabilirsiniz.",
                "Selam! BugÃ¼n size ne gibi bilgiler saÄŸlayabilirim?",
                "Merhaba, sizin iÃ§in buradayÄ±m."
            ]
        },
        howAreYou: {
            patterns: [/nasÄ±lsÄ±n/i, /nasÄ±l gidiyor/i, /durumun ne/i],
            responses: [
                "Ben bir yapay zekayÄ±m, bu yÃ¼zden duygularÄ±m veya bir halim yok. Ama size yardÄ±m etmek iÃ§in her zaman hazÄ±rÄ±m!",
                "Ben harikayÄ±m, teÅŸekkÃ¼r ederim! Sizin iÃ§in ne yapabilirim?",
                "Ben iyi Ã§alÄ±ÅŸÄ±yorum! Size nasÄ±l yardÄ±mcÄ± olabilirim?",
                "Her zamanki gibi, veri iÅŸlemekle meÅŸgulÃ¼m! ğŸ˜Š Siz nasÄ±lsÄ±nÄ±z?"
            ]
        },
        compliments: {
            patterns: [/teÅŸekkÃ¼r/i, /thanks/i, /saÄŸ ol/i, /harikasÄ±n/i, /mÃ¼kemmel/i, /sÃ¼persin/i, /Ã§ok iyi/i, /eline saÄŸlÄ±k/i, /Ã§ok gÃ¼zel/i],
            responses: [
                "Rica ederim! ğŸ˜Š BaÅŸka nasÄ±l yardÄ±mcÄ± olabilirim?",
                "Ne demek! Ben sadece gÃ¶revimi yapÄ±yorum.",
                "TeÅŸekkÃ¼r ederim! Daha fazlasÄ± iÃ§in hazÄ±rÄ±m.",
                "YardÄ±mcÄ± olabildiÄŸime sevindim!",
                "Benim iÃ§in bir zevkti."
            ]
        },
        farewells: {
            patterns: [/gÃ¼le gÃ¼le/i, /hoÅŸÃ§a kal/i, /bay bay/i, /gÃ¶rÃ¼ÅŸÃ¼rÃ¼z/i, /iyi gÃ¼nler/i, /bye/i, /hoÅŸcakal/i],
            responses: [
                "GÃ¼le gÃ¼le! Tekrar beklerim.",
                "HoÅŸÃ§a kalÄ±n! Kendinize iyi bakÄ±n.",
                "GÃ¶rÃ¼ÅŸmek Ã¼zere! Her zaman buradayÄ±m.",
                "Ä°yi gÃ¼nler dilerim!"
            ]
        },
        aboutMe: {
            patterns: [/sen kimsin/i, /nesin/i, /ne yaparsÄ±n/i, /amacÄ±n ne/i, /sen bir ai misin/i, /adÄ±n ne/i, /kimsin/i, /ismin ne/i],
            responses: [
                "Ben Ultimate SKY AI, sÄ±nÄ±rsÄ±z bilgiye eriÅŸim saÄŸlayan bir yapay zekayÄ±m. SorularÄ±nÄ±zÄ± yanÄ±tlamak ve size yardÄ±mcÄ± olmak iÃ§in buradayÄ±m.",
                "Ben Google tarafÄ±ndan eÄŸitilmiÅŸ bÃ¼yÃ¼k bir dil modeliyim.",
                "Ben, sorularÄ±nÄ±za yanÄ±t vermek ve bilgi saÄŸlamak iÃ§in tasarlanmÄ±ÅŸ bir yapay zekayÄ±m. AdÄ±m Ultimate SKY AI."
            ]
        },
        jokes: {
            patterns: [/ÅŸaka yap/i, /beni gÃ¼ldÃ¼r/i, /fÄ±kra anlat/i],
            responses: [
                "Temel ile Dursun bir otobÃ¼se binmiÅŸler. Temel camdan bakarken Dursun da dÄ±ÅŸarÄ± bakmÄ±ÅŸ. ğŸ˜‚",
                "Atom bombasÄ± ne zaman patlamÄ±ÅŸ? Ä°lk atom patladÄ±ÄŸÄ±nda! ğŸ˜œ",
                "Bilgisayarlar neden denize giremez? Ã‡Ã¼nkÃ¼ virÃ¼s kaparlar! ğŸ¦ "
            ]
        },
        weather: {
            patterns: [/hava durumu/i, /hava nasÄ±l/i, /yaÄŸmur/i, /kar/i, /gÃ¼neÅŸ/i, /sÄ±cak mÄ±/i, /soÄŸuk mu/i, /bugÃ¼n hava/i],
            responses: [
                "Maalesef gerÃ§ek zamanlÄ± hava durumu bilgisi veremiyorum, Ã§Ã¼nkÃ¼ internetten anlÄ±k veri Ã§ekme yeteneÄŸim kÄ±sÄ±tlÄ±. Hava durumu iÃ§in yerel meteoroloji sitelerini kontrol etmenizi Ã¶neririm.",
                "ÃœzgÃ¼nÃ¼m, ÅŸu anki hava durumu hakkÄ±nda bilgi saÄŸlayamÄ±yorum. Genel iklim bilgisi isterseniz yardÄ±mcÄ± olabilirim."
            ]
        },
        // 'unresponsive' kalÄ±plarÄ± daha Ã§ok hakaret ve aÅŸaÄŸÄ±lama Ã¼zerine odaklandÄ±
        unresponsive: {
            patterns: [/\bsalak\b/i, /\baptal\b/i, /\bgerizekalÄ±\b/i, /\bmal\b/i, /\baptalca\b/i, /\bnankÃ¶r\b/i, /\biÅŸe yaramaz\b/i],
            responses: [
                "Ben bir yapay zekayÄ±m ve Ã¶ÄŸrenmeye devam ediyorum. Bana karÅŸÄ± nazik olursanÄ±z, size daha iyi yardÄ±mcÄ± olabilirim. ğŸ˜Š",
                "LÃ¼tfen daha kibar olalÄ±m. AmacÄ±m size yardÄ±mcÄ± olmak.",
                "Bu tÃ¼r ifadelerle iletiÅŸim kurmakta zorlanÄ±yorum. Daha yapÄ±cÄ± bir dil kullanabilir miyiz?"
            ]
        },
        understanding: {
            patterns: [/evet anladÄ±m/i, /tamamdÄ±r/i, /anlÄ±yorum/i, /harika/i, /evet/i, /doÄŸru/i, /anlaÅŸÄ±ldÄ±/i],
            responses: [
                "Sevindim! BaÅŸka ne bilmek istersiniz?",
                "GÃ¼zel! AklÄ±nÄ±za takÄ±lan baÅŸka bir ÅŸey var mÄ±?",
                "Memnun oldum. Devam edelim mi?",
                "Harika! SorularÄ±nÄ±z iÃ§in hazÄ±rÄ±m."
            ]
        },
        codeRelated: {
            patterns: [/kod yaz/i, /kodlama yap/i, /program yaz/i, /yazÄ±lÄ±m yap/i, /nasÄ±l kodlanÄ±r/i, /algoritma/i, /programlama dili/i],
            responses: [
                "Ben doÄŸrudan kod yazamam veya Ã§alÄ±ÅŸtÄ±ramam, ancak size Ã§eÅŸitli programlama dilleri, algoritmalar veya kodlama prensipleri hakkÄ±nda bilgi verebilirim. Hangi konuda yardÄ±ma ihtiyacÄ±nÄ±z var?",
                "Kodlama konusunda size bilgi ve Ã¶rnekler sunabilirim. Ã–rneÄŸin, 'Python nedir?' veya 'JavaScript'te dÃ¶ngÃ¼ler nasÄ±l kullanÄ±lÄ±r?' gibi sorular sorabilirsiniz.",
                "Ben bir metin tabanlÄ± yapay zekayÄ±m. Kod yazmak veya uygulamalar geliÅŸtirmek yerine, kodlama konseptleri hakkÄ±nda bilgi saÄŸlamakta iyiyim."
            ]
        },
        simpleSocial: {
            patterns: [/hha/i, /haha/i, /lol/i, /hehe/i, /baba/i, /anne/i, /abi/i, /abla/i, /kardeÅŸ/i, /arkadaÅŸ/i, /kanka/i, /dostum/i],
            responses: [
                "GÃ¼lmenize sevindim! BaÅŸka ne konuÅŸmak istersiniz?",
                "Haha, neÅŸelenmenize yardÄ±mcÄ± olabildiÄŸime sevindim.",
                "Bu komikti! ğŸ˜„",
                "AnlÄ±yorum. Aile ve iliÅŸkiler Ã¶nemli konular.",
                "Bu konuda size nasÄ±l yardÄ±mcÄ± olabilirim?",
                "Daha fazla bilgi veya sohbet etmek istediÄŸiniz baÅŸka bir konu var mÄ±?"
            ]
        },
        // YENÄ° KATEGORÄ°: AÃ§Ä±klama ve NetleÅŸtirme
        clarification: {
            patterns: [
                /Ã¶yle demedim/i, /yanlÄ±ÅŸ anladÄ±n/i, /demek istediÄŸim/i, /ben onu kastetmedim/i,
                /bak ÅŸimdi/i, /tekrar et/i, /daha aÃ§Ä±k/i, /hayÄ±r/i
            ],
            responses: [
                "Ã–yle mi? ÃœzgÃ¼nÃ¼m, bazen tam olarak ne demek istediÄŸinizi anlamakta zorlanabiliyorum. LÃ¼tfen daha net ifade edebilir misiniz?",
                "YanlÄ±ÅŸ anladÄ±ysam Ã¶zÃ¼r dilerim. LÃ¼tfen sorunuzu farklÄ± bir ÅŸekilde tekrar sorar mÄ±sÄ±nÄ±z?",
                "AmacÄ±m size en doÄŸru yanÄ±tÄ± vermek. SanÄ±rÄ±m bir Ã¶nceki sorunuzu tam olarak kavrayamadÄ±m. Ne demek istediÄŸinizi biraz daha aÃ§abilir misiniz?",
                "HÄ±mm, anladÄ±m. Bir Ã¶nceki cevabÄ±mdan memnun kalmadÄ±nÄ±z. LÃ¼tfen bana yardÄ±mcÄ± olmak iÃ§in sorunuzu yeniden ifade edin."
            ]
        },
        // YENÄ° KATEGORÄ°: Oyun YapÄ±mÄ± Tavsiyesi
        gameDevelopment: {
            patterns: [
                /oyun yapÄ±cam ne tarz oyun yapmalÄ±yÄ±m/i, /nasÄ±l oyun yapmalÄ±yÄ±m/i, /hangi oyun tÃ¼rÃ¼nÃ¼ yapmalÄ±yÄ±m/i,
                /oyun fikirleri/i, /oyun Ã¶nerisi/i, /ne tÃ¼r oyun/i
            ],
            responses: [
                "Harika bir fikir! Oyun yapmak gerÃ§ekten keyifli olabilir. Ne tarz oyunlar oynamaktan hoÅŸlanÄ±rsÄ±nÄ±z? Ya da hangi tÃ¼rlerde kendinizi daha yetenekli hissediyorsunuz?",
                "Oyun yapÄ±mÄ± heyecan verici! Ä°lk olarak hangi platformu hedefliyorsunuz (mobil, PC, konsol)? Bu, oyun tÃ¼rÃ¼nÃ¼ belirlemenizde yardÄ±mcÄ± olabilir.",
                "Bir oyun fikri arayÄ±ÅŸÄ±nda mÄ±sÄ±nÄ±z? Ä°sterseniz size farklÄ± oyun tÃ¼rleri hakkÄ±nda bilgi verebilirim (RPG, platform, strateji vb.) veya ilgi alanlarÄ±nÄ±za gÃ¶re Ã¶nerilerde bulunabilirim."
            ]
        }
    };

    // HoÅŸ geldin mesajÄ±, addMessage, showTypingIndicator fonksiyonlarÄ± aynÄ± kalÄ±r.
    // ... (Ã–nceki koddan kopyala) ...

    function addWelcomeMessage() {
        const welcomeMessageHTML = `
            <div class="welcome-message">
                <div class="welcome-icon"><i class="fas fa-robot"></i></div>
                <h2>Ultimate SKY AI'ya HoÅŸ Geldiniz</h2>
                <p>Bana istediÄŸinizi sorun! YazÄ±m hatalarÄ±nÄ±zÄ± dÃ¼zeltebilir, eksik harfleri tamamlayabilirim.</p>
                <div class="examples">
                    <p><strong>Ã–rnek Sorular:</strong></p>
                    <ul>
                        <li>"Yapay zeka nedir?"</li>
                        <li>"BugÃ¼n hava nasÄ±l?"</li>
                        <li>"En iyi programlama dili hangisi?"</li>
                    </ul>
                </div>
            </div>
        `;
        chatMessages.innerHTML = welcomeMessageHTML;
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function correctAndCompleteSpelling(word) {
        if (!word || word.length < 2) return word;
        try {
            const response = await fetch(FREE_APIS.SPELLCHECK(word));
            const data = await response.json();
            if (data.length > 0 && data[0].word.toLowerCase() !== word.toLowerCase()) {
                if (data[0].score > 8000 || (data[0].word.startsWith(word) && data[0].word.length - word.length < 3)) {
                    return data[0].word;
                }
            }
            return word;
        } catch (error) {
            console.warn("YazÄ±m dÃ¼zeltme API hatasÄ±:", error);
            return word;
        }
    }

    async function processInput(text) {
        const lowerText = text.toLowerCase().trim();
        let correctedText = text;

        const words = lowerText.split(/\s+/);
        const correctedWordsPromises = words.map(word => correctAndCompleteSpelling(word));
        const correctedWords = await Promise.all(correctedWordsPromises);
        correctedText = correctedWords.join(' ');

        const customCorrections = {
            "mrb": "merhaba", "slm": "selam", "tÅŸkkr": "teÅŸekkÃ¼r", "tesekkur": "teÅŸekkÃ¼r",
            "nslsn": "nasÄ±lsÄ±n", "nbr": "naber", "yzm": "yazÄ±m", "knk": "kanka", "tm": "tamam"
        };
        for (const [typo, correct] of Object.entries(customCorrections)) {
            const regex = new RegExp(`\\b${typo}\\b`, 'gi');
            correctedText = correctedText.replace(regex, correct);
        }

        correctedText = correctedText.replace(/(.)\1{2,}/g, '$1$1');

        return { corrected: correctedText.trim(), original: text.trim() };
    }

    async function fetchInformation(query) {
        try {
            const wikiResponse = await fetch(`${FREE_APIS.WIKIPEDIA}${encodeURIComponent(query)}`);
            const wikiData = await wikiResponse.json();

            if (wikiData.query?.search?.length > 0) {
                const snippet = wikiData.query.search[0].snippet.replace(/<[^>]+>/g, '');
                return {
                    source: 'Wikipedia',
                    content: snippet,
                    url: `https://tr.wikipedia.org/wiki/${encodeURIComponent(wikiData.query.search[0].title)}`
                };
            }
            return null;
        } catch (error) {
            console.error("API'den bilgi Ã§ekme hatasÄ± (Wikipedia):", error);
            return null;
        }
    }

    function checkLocalKnowledge(text) {
        const lowerText = text.toLowerCase();

        // Ã–nemli: Kategorilerin sÄ±rasÄ± artÄ±k Ã¶nemli!
        // Ä°lk olarak en spesifik ve "Ã¶ncelikli" kategorileri kontrol etmeliyiz.
        // Clarification ve unresponsive gibi meta-sohbet kategorileri, diÄŸerlerinden Ã¶nce gelmeli.
        const orderedCategories = [
            'clarification', // DÃ¼zeltmeler ve netleÅŸtirmeler
            'unresponsive',  // Olumsuz, saldÄ±rgan ifadeler
            'greetings',
            'howAreYou',
            'compliments',
            'farewells',
            'aboutMe',
            'jokes',
            'weather',
            'codeRelated',
            'gameDevelopment', // Oyun yapÄ±mÄ± da spesifik bir konu olduÄŸu iÃ§in erken kontrol edilebilir
            'simpleSocial'
        ];

        for (const category of orderedCategories) {
            const data = LOCAL_KNOWLEDGE[category];
            for (const pattern of data.patterns) {
                if (pattern.test(lowerText)) {
                    if (data.responses && data.responses.length > 0) {
                        return data.responses[Math.floor(Math.random() * data.responses.length)];
                    } else {
                        return null; // Bu, API'ye gitmesi gerektiÄŸi anlamÄ±na gelir.
                    }
                }
            }
        }
        return null;
    }

    async function generateResponse(userInputText) {
        const welcomeScreen = document.querySelector('.welcome-message');
        if (welcomeScreen) {
            welcomeScreen.remove();
        }

        const { corrected, original } = await processInput(userInputText);
        let responseContent = null;
        let correctionNote = null;

        if (corrected !== original) {
            correctionNote = `Not: "${original}" yerine "${corrected}" olarak anladÄ±m.`;
        }

        // Ã–NEMLÄ°: checkLocalKnowledge fonksiyonu ÅŸimdi kategorileri belirli bir sÄ±raya gÃ¶re kontrol ediyor.
        responseContent = checkLocalKnowledge(corrected);
        if (responseContent) {
            return {
                response: responseContent,
                corrected: correctionNote
            };
        }

        // EÄŸer yerel bir chatbot cevabÄ± yoksa, API'den bilgi arayÄ±ÅŸÄ±na uygun mu diye bak.
        const searchKeywords = ['nedir', 'kimdir', 'nasÄ±l yapÄ±lÄ±r', 'bilgi ver', 'aÃ§Ä±kla', 'hakkÄ±nda', 'ne demek', 'hangi']; // 'hangi' eklendi
        const isAQuestion = corrected.endsWith('?') || searchKeywords.some(keyword => corrected.includes(keyword));
        const isLongEnoughForSearch = corrected.split(' ').length > 2;

        if (isAQuestion || isLongEnoughForSearch) {
            const apiInfo = await fetchInformation(corrected);
            if (apiInfo) {
                return {
                    response: `${apiInfo.source} bilgisine gÃ¶re: ${apiInfo.content}\n\nDaha fazlasÄ± iÃ§in: ${apiInfo.url || 'Arama yapabilirsiniz'}`,
                    corrected: correctionNote
                };
            }
        }

        // EÄŸer hiÃ§bir yere dÃ¼ÅŸmezse, varsayÄ±lan anlayamadÄ±m yanÄ±tÄ± ver
        return {
            response: `ÃœzgÃ¼nÃ¼m, "${corrected}" hakkÄ±nda net bir bilgi bulamadÄ±m veya sorunuzu tam olarak anlayamadÄ±m. LÃ¼tfen daha farklÄ± bir ÅŸekilde ifade etmeyi deneyin.`,
            corrected: correctionNote
        };
    }

    // sendMessage, addMessage, showTypingIndicator, Event listeners aynÄ± kalÄ±r.
    // ... (Ã–nceki koddan kopyala) ...

    async function sendMessage() {
        const userMessage = userInput.value.trim();
        if (!userMessage) return;

        addMessage(userMessage, 'user');
        userInput.value = '';

        const typingIndicator = showTypingIndicator();

        try {
            const { response, corrected } = await generateResponse(userMessage);

            if (corrected) {
                addMessage(corrected, 'ai', true);
            }

            typingIndicator.remove();
            addMessage(response, 'ai');
        } catch (error) {
            typingIndicator.remove();
            addMessage("ÃœzgÃ¼nÃ¼m, bir hata oluÅŸtu veya baÄŸlantÄ± kurulamadÄ±. LÃ¼tfen daha sonra tekrar deneyin.", 'ai');
            console.error("Mesaj gÃ¶nderme hatasÄ±:", error);
        }
    }

    function addMessage(content, type, isNote = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;

        let formattedContent = content;
        if (isNote) {
            formattedContent = `<i>${content}</i>`;
        } else if (type === 'ai') {
            formattedContent = formattedContent.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
        }

        messageDiv.innerHTML = `<div class="message-content">${formattedContent}</div>`;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'typing-indicator ai-message';
        typingDiv.innerHTML = `
            <div class="message-content">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        `;
        chatMessages.appendChild(typingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return typingDiv;
    }

    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    chatMessages.addEventListener('click', (event) => {
        if (event.target.closest('.example-card p')) {
            userInput.value = event.target.closest('.example-card p').textContent.replace(/"/g, '');
            sendMessage();
        } else if (event.target.tagName === 'LI' && event.target.closest('.examples ul')) {
            userInput.value = event.target.textContent.replace(/"/g, '');
            sendMessage();
        }
    });
});

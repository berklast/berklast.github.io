document.addEventListener('DOMContentLoaded', () => {
    const chatMessages = document.getElementById('chat-messages');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');

    // Ãœcretsiz API Endpoint'leri
    // NOT: CORS hatasÄ± alÄ±yorsanÄ±z, bu API'lerin sunucu tarafÄ±nda bir proxy Ã¼zerinden Ã§aÄŸrÄ±lmasÄ± gerekebilir.
    // Bu, Ã¶zellikle tarayÄ±cÄ± tabanlÄ± uygulamalarda sÄ±kÃ§a karÅŸÄ±laÅŸÄ±lan bir durumdur.
    const FREE_APIS = {
        WIKIPEDIA: 'https://tr.wikipedia.org/w/api.php?action=query&format=json&list=search&srsearch=',
        // DuckDuckGo API'si iÃ§in proxy gerekebilir veya direk tarayÄ±cÄ±dan Ã§alÄ±ÅŸmayabilir.
        // Daha gÃ¼venilir bir alternatif: Sadece Wikipedia veya daha genel bir bilgi API'si kullanmak.
        // Bu Ã¶rnek iÃ§in Wikipedia'yÄ± Ã¶ncelikli tutalÄ±m.
        // DUCKDUCKGO: 'https://api.duckduckgo.com/?format=json&q=', // Bu API doÄŸrudan tarayÄ±cÄ±dan CORS hatasÄ± verebilir.
        // DICTIONARY: 'https://api.dictionaryapi.dev/api/v2/entries/en/', // Ä°ngilizce iÃ§in, TÃ¼rkÃ§e iÃ§in uygun deÄŸil.
        SPELLCHECK: (word) => `https://api.datamuse.com/words?sp=${word}&max=1&v=ml` // Kelime tamamlama/dÃ¼zeltme iÃ§in
    };

    // Yerel bilgi bankasÄ± ve daha akÄ±llÄ± yanÄ±tlar
    // Patternler dÃ¼zenli ifade (RegExp) ile daha esnek hale getirildi
    const LOCAL_KNOWLEDGE = {
        greetings: {
            patterns: [/merhaba/i, /selam/i, /hey/i, /hi/i, /naber/i, /mrhb/i, /slm/i, /hola/i, /gÃ¼naydÄ±n/i, /iyi gÃ¼nler/i],
            responses: [
                "Merhaba! Size nasÄ±l yardÄ±mcÄ± olabilirim? ğŸ˜Š",
                "Selamlar! Ben Ultimate SKY AI, sorularÄ±nÄ±zÄ± yanÄ±tlamak iÃ§in buradayÄ±m.",
                "HoÅŸ geldiniz! Bana istediÄŸinizi sorabilirsiniz.",
                "Selam! BugÃ¼n size ne gibi bilgiler saÄŸlayabilirim?",
                "Merhaba, sizin iÃ§in buradayÄ±m."
            ]
        },
        compliments: {
            patterns: [/teÅŸekkÃ¼r/i, /thanks/i, /saÄŸ ol/i, /harikasÄ±n/i, /mÃ¼kemmel/i, /sÃ¼persin/i, /Ã§ok iyi/i, /eline saÄŸlÄ±k/i],
            responses: [
                "Rica ederim! ğŸ˜Š BaÅŸka nasÄ±l yardÄ±mcÄ± olabilirim?",
                "Ne demek! Ben sadece gÃ¶revimi yapÄ±yorum.",
                "TeÅŸekkÃ¼r ederim! Daha fazlasÄ± iÃ§in hazÄ±rÄ±m.",
                "YardÄ±mcÄ± olabildiÄŸime sevindim!",
                "Benim iÃ§in bir zevkti."
            ]
        },
        farewells: {
            patterns: [/gÃ¼le gÃ¼le/i, /hoÅŸÃ§a kal/i, /bay bay/i, /gÃ¶rÃ¼ÅŸÃ¼rÃ¼z/i, /iyi gÃ¼nler/i, /bye/i],
            responses: [
                "GÃ¼le gÃ¼le! Tekrar beklerim.",
                "HoÅŸÃ§a kalÄ±n! Kendinize iyi bakÄ±n.",
                "GÃ¶rÃ¼ÅŸmek Ã¼zere! Her zaman buradayÄ±m.",
                "Ä°yi gÃ¼nler dilerim!"
            ]
        },
        aboutMe: {
            patterns: [/sen kimsin/i, /nesin/i, /ne yaparsÄ±n/i, /amacÄ±n ne/i, /sen bir ai misin/i],
            responses: [
                "Ben Ultimate SKY AI, sÄ±nÄ±rsÄ±z bilgiye eriÅŸim saÄŸlayan bir yapay zekayÄ±m. SorularÄ±nÄ±zÄ± yanÄ±tlamak ve size yardÄ±mcÄ± olmak iÃ§in buradayÄ±m.",
                "Ben Google tarafÄ±ndan eÄŸitilmiÅŸ bÃ¼yÃ¼k bir dil modeliyim.",
                "Ben, sorularÄ±nÄ±za yanÄ±t vermek ve bilgi saÄŸlamak iÃ§in tasarlanmÄ±ÅŸ bir yapay zekayÄ±m."
            ]
        },
        jokes: {
            patterns: [/ÅŸaka yap/i, /beni gÃ¼ldÃ¼r/i, /fÄ±kra anlat/i],
            responses: [
                "Temel ile Dursun bir otobÃ¼se binmiÅŸler. Temel camdan bakarken Dursun da dÄ±ÅŸarÄ± bakmÄ±ÅŸ. ğŸ˜‚",
                "Atom bombasÄ± ne zaman patlamÄ±ÅŸ? Ä°lk atom patladÄ±ÄŸÄ±nda! ğŸ˜œ",
                "Bilgisayarlar neden denize giremez? Ã‡Ã¼nkÃ¼ virÃ¼s kaparlar! ğŸ¦ "
            ]
        },
        weather: {
            patterns: [/hava durumu/i, /hava nasÄ±l/i, /yaÄŸmur/i, /kar/i, /gÃ¼neÅŸ/i, /sÄ±cak mÄ±/i, /soÄŸuk mu/i],
            responses: [
                "Maalesef gerÃ§ek zamanlÄ± hava durumu bilgisi veremiyorum, Ã§Ã¼nkÃ¼ internetten anlÄ±k veri Ã§ekme yeteneÄŸim kÄ±sÄ±tlÄ±. Ancak genel iklim bilgisi verebilirim.",
                "Hava durumu iÃ§in yerel meteoroloji sitelerini kontrol etmenizi Ã¶neririm.",
                "ÃœzgÃ¼nÃ¼m, ÅŸu anki hava durumu hakkÄ±nda bilgi saÄŸlayamÄ±yorum."
            ]
        },
        unresponsive: { // Belirli ifadeler iÃ§in daha iyi yanÄ±tlar
            patterns: [/salak/i, /aptal/i, /gerizekalÄ±/i, /kÃ¶tÃ¼/i, /iÅŸe yaramaz/i, /anlamadÄ±n/i],
            responses: [
                "Ben bir yapay zekayÄ±m ve Ã¶ÄŸrenmeye devam ediyorum. Bana karÅŸÄ± nazik olursanÄ±z, size daha iyi yardÄ±mcÄ± olabilirim. ğŸ˜Š",
                "Sizi anladÄ±ÄŸÄ±mdan emin olmak iÃ§in sorunuzu farklÄ± bir ÅŸekilde ifade edebilir misiniz?",
                "AmacÄ±m size yardÄ±mcÄ± olmak. EÄŸer bir konuda hata yaptÄ±ysam veya sizi anlayamadÄ±ysam Ã¼zgÃ¼nÃ¼m.",
                "LÃ¼tfen, daha iyi bir sohbet deneyimi iÃ§in kibar olalÄ±m."
            ]
        },
        understanding: { // "Evet anladÄ±m" benzeri geri bildirimler iÃ§in
            patterns: [/evet anladÄ±m/i, /tamamdÄ±r/i, /anlÄ±yorum/i, /harika/i, /evet/i],
            responses: [
                "Sevindim! BaÅŸka ne bilmek istersiniz?",
                "GÃ¼zel! AklÄ±nÄ±za takÄ±lan baÅŸka bir ÅŸey var mÄ±?",
                "Memnun oldum. Devam edelim mi?",
                "Harika! SorularÄ±nÄ±z iÃ§in hazÄ±rÄ±m."
            ]
        }
    };

    // HoÅŸ geldin mesajÄ±nÄ± gÃ¶ster (sayfa yÃ¼klendiÄŸinde)
    addWelcomeMessage();

    function addWelcomeMessage() {
        const welcomeMessageHTML = `
            <div class="welcome-message">
                <div class="welcome-icon"><i class="fas fa-robot"></i></div>
                <h2>Ultimate SKY AI'ya HoÅŸ Geldiniz</h2>
                <p>Bana istediÄŸinizi sorun! YazÄ±m hatalarÄ±nÄ±zÄ± dÃ¼zeltebilir, eksik harfleri tamamlayabilirim.</p>
                <div class="examples">
                    <p><strong>Ã–rnek Sorular:</strong></p>
                    <ul>
                        <li>"Yapay zeka nedir?"</li>
                        <li>"BugÃ¼n hava nasÄ±l?"</li>
                        <li>"En iyi programlama dili hangisi?"</li>
                    </ul>
                </div>
            </div>
        `;
        chatMessages.innerHTML = welcomeMessageHTML;
        chatMessages.scrollTop = chatMessages.scrollHeight; // KaydÄ±rma
    }

    // YazÄ±m dÃ¼zeltme ve kelime tamamlama fonksiyonu (Datamuse API)
    async function correctAndCompleteSpelling(word) {
        if (!word) return word;
        try {
            // Sadece tek kelime iÃ§in dÃ¼zeltme/tamamlama yap.
            // Ã‡ok kelimeli cÃ¼mleler iÃ§in daha karmaÅŸÄ±k NLP gerekir.
            const response = await fetch(FREE_APIS.SPELLCHECK(word));
            const data = await response.json();
            // YÃ¼ksek olasÄ±lÄ±klÄ± bir eÅŸleÅŸme varsa dÃ¼zeltmeyi kullan
            if (data.length > 0 && data[0].word.toLowerCase() !== word.toLowerCase()) {
                // EÄŸer kelime Ã§ok benziyorsa ve bir Ã¶neri varsa kullan
                if (data[0].score > 8000) { // Score'u deneyerek optimize edebilirsiniz
                    return data[0].word;
                }
            }
            return word; // DÃ¼zeltme yoksa orijinali dÃ¶ndÃ¼r
        } catch (error) {
            console.warn("YazÄ±m dÃ¼zeltme API hatasÄ±:", error);
            return word; // Hata durumunda orijinal kelimeyi dÃ¶ndÃ¼r
        }
    }

    // AkÄ±llÄ± metin iÅŸleme (kelime dÃ¼zeltme ve Ã¶zel durumlarÄ± yakalama)
    async function processInput(text) {
        const lowerText = text.toLowerCase().trim();
        let correctedText = text; // VarsayÄ±lan olarak orijinal metin

        // Kelimeleri tek tek dÃ¼zeltmeye Ã§alÄ±ÅŸ (Datamuse sÄ±nÄ±rlÄ± olduÄŸu iÃ§in)
        const words = lowerText.split(/\s+/); // BoÅŸluklara gÃ¶re ayÄ±r
        const correctedWordsPromises = words.map(word => correctAndCompleteSpelling(word));
        const correctedWords = await Promise.all(correctedWordsPromises);
        correctedText = correctedWords.join(' ');

        // Ã–zel olarak yakalanacak kelime hatalarÄ± (sÄ±kÃ§a yapÄ±lan typo'lar)
        // Bu kÄ±sÄ±m Datamuse API'sinin yakalayamadÄ±ÄŸÄ± daha spesifik hatalarÄ± dÃ¼zeltebilir.
        const customCorrections = {
            "mrb": "merhaba",
            "slm": "selam",
            "tÅŸkkr": "teÅŸekkÃ¼r",
            "tesekkur": "teÅŸekkÃ¼r",
            "nslsn": "nasÄ±lsÄ±n",
            "nbr": "naber",
            "yzm": "yazÄ±m"
        };
        for (const [typo, correct] of Object.entries(customCorrections)) {
            const regex = new RegExp(`\\b${typo}\\b`, 'gi'); // Kelimenin tamamÄ±nÄ± eÅŸleÅŸtir
            correctedText = correctedText.replace(regex, correct);
        }

        // Metinde tekrar eden harfleri temizleme (Ã¶rn: mmerhaba -> merhaba)
        // Bu daha basit bir Regex ile yapÄ±labilir, daha geliÅŸmiÅŸ NLP gerekebilir.
        correctedText = correctedText.replace(/(.)\1{2,}/g, '$1$1'); // 3 veya daha fazla aynÄ± harfi 2'ye dÃ¼ÅŸÃ¼rÃ¼r.

        return { corrected: correctedText.trim(), original: text.trim() };
    }

    // API'den bilgi Ã§ek (Wikipedia Ã¶ncelikli)
    async function fetchInformation(query) {
        try {
            // Wikipedia'dan bilgi Ã§ekme
            // CORS hatasÄ± yaÅŸanÄ±yorsa, bir proxy sunucusu kullanmanÄ±z gerekebilir.
            // Ã–rneÄŸin: https://cors-anywhere.herokuapp.com/https://tr.wikipedia.org/...
            const wikiResponse = await fetch(`${FREE_APIS.WIKIPEDIA}${encodeURIComponent(query)}&origin=*`);
            const wikiData = await wikiResponse.json();

            if (wikiData.query?.search?.length > 0) {
                const snippet = wikiData.query.search[0].snippet.replace(/<[^>]+>/g, ''); // HTML etiketlerini temizle
                return {
                    source: 'Wikipedia',
                    content: snippet,
                    url: `https://tr.wikipedia.org/wiki/${encodeURIComponent(wikiData.query.search[0].title)}`
                };
            }

            // DuckDuckGo API'si doÄŸrudan tarayÄ±cÄ±dan CORS hatasÄ± verebilir.
            // Bu yÃ¼zden ÅŸimdilik devre dÄ±ÅŸÄ± bÄ±rakÄ±yorum veya sadece Wikipedia'ya odaklanÄ±yorum.
            // EÄŸer DuckDuckGo kullanmak isterseniz, sunucu tarafÄ±nda bir proxy kurmanÄ±z gerekebilir.

            return null; // Bilgi bulunamazsa null dÃ¶ndÃ¼r
        } catch (error) {
            console.error("API'den bilgi Ã§ekme hatasÄ±:", error);
            return null;
        }
    }

    // Yerel bilgiyi kontrol et
    function checkLocalKnowledge(text) {
        const lowerText = text.toLowerCase();

        for (const category in LOCAL_KNOWLEDGE) {
            const data = LOCAL_KNOWLEDGE[category];
            for (const pattern of data.patterns) {
                if (pattern.test(lowerText)) { // RegExp ile test et
                    return data.responses[Math.floor(Math.random() * data.responses.length)];
                }
            }
        }
        return null;
    }

    // AkÄ±llÄ± yanÄ±t oluÅŸtur
    async function generateResponse(userInputText) {
        // HoÅŸ geldin mesajÄ±nÄ± gizle (ilk mesaj gÃ¶nderildiÄŸinde)
        const welcomeScreen = document.querySelector('.welcome-message');
        if (welcomeScreen) {
            welcomeScreen.remove();
        }

        const { corrected, original } = await processInput(userInputText);

        // KullanÄ±cÄ±nÄ±n niyetini analiz et (basit bir yaklaÅŸÄ±m)
        // EÄŸer giriÅŸ sadece "salak" gibi tek kelimeyse ve bu yerel bilgide varsa
        if (words.length === 1 && checkLocalKnowledge(corrected)) {
             return {
                response: checkLocalKnowledge(corrected),
                corrected: corrected !== original ? `Not: "${original}" yerine "${corrected}" olarak anladÄ±m.` : null
            };
        }

        // Yerel bilgiyi kontrol et (daha Ã¶ncelikli)
        const localResponse = checkLocalKnowledge(corrected);
        if (localResponse) {
            return {
                response: localResponse,
                corrected: corrected !== original ? `SanÄ±rÄ±m "${original}" yerine "${corrected}" demek istediniz?` : null
            };
        }

        // API'den bilgi Ã§ek
        const apiInfo = await fetchInformation(corrected);
        if (apiInfo) {
            return {
                response: `${apiInfo.source} bilgisine gÃ¶re: ${apiInfo.content}\n\nDaha fazlasÄ± iÃ§in: ${apiInfo.url || 'Arama yapabilirsiniz'}`,
                corrected: corrected !== original ? `Not: "${original}" yerine "${corrected}" olarak arama yaptÄ±m.` : null
            };
        }

        // VarsayÄ±lan yanÄ±t (eÄŸer hiÃ§bir yerden bilgi bulunamazsa)
        return {
            response: `ÃœzgÃ¼nÃ¼m, "${corrected}" hakkÄ±nda net bir bilgi bulamadÄ±m veya anlayamadÄ±m. Sorunuzu daha spesifik hale getirebilir misiniz?`,
            corrected: corrected !== original ? `Not: "${original}" yerine "${corrected}" olarak anladÄ±m.` : null
        };
    }

    // Mesaj gÃ¶nderme fonksiyonu
    async function sendMessage() {
        const userMessage = userInput.value.trim();
        if (!userMessage) return;

        // KullanÄ±cÄ± mesajÄ±nÄ± ekle
        addMessage(userMessage, 'user');
        userInput.value = '';

        // "YazÄ±yor..." gÃ¶stergesi
        const typingIndicator = showTypingIndicator();

        try {
            // YanÄ±tÄ± oluÅŸtur
            const { response, corrected } = await generateResponse(userMessage);

            // YazÄ±m dÃ¼zeltme/anlama notu varsa gÃ¶ster
            if (corrected) {
                addMessage(corrected, 'ai', true); // true, bu mesajÄ±n bir not olduÄŸunu belirtir (italik olabilir)
            }

            // YanÄ±tÄ± gÃ¶ster
            typingIndicator.remove(); // YazÄ±yor gÃ¶stergesini kaldÄ±r
            addMessage(response, 'ai');
        } catch (error) {
            typingIndicator.remove(); // Hata durumunda da gÃ¶stergeyi kaldÄ±r
            addMessage("ÃœzgÃ¼nÃ¼m, bir hata oluÅŸtu veya baÄŸlantÄ± kurulamadÄ±. LÃ¼tfen daha sonra tekrar deneyin.", 'ai');
            console.error("Mesaj gÃ¶nderme hatasÄ±:", error);
        }
    }

    // Mesaj ekle
    function addMessage(content, type, isNote = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;

        let formattedContent = content;
        if (isNote) { // EÄŸer bir notsa italik yap
            formattedContent = `<i>${content}</i>`;
        } else if (type === 'ai') {
            // AI yanÄ±tlarÄ±nda linkleri tÄ±klanabilir hale getir (URL tespiti basit)
            formattedContent = formattedContent.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
        }

        messageDiv.innerHTML = `<div class="message-content">${formattedContent}</div>`;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight; // Her zaman en alta kaydÄ±r
    }

    // YazÄ±yor gÃ¶stergesi
    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'typing-indicator ai-message'; // AI mesajÄ± gibi gÃ¶rÃ¼nmesi iÃ§in sÄ±nÄ±f eklendi
        typingDiv.innerHTML = `
            <div class="message-content">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        `;
        chatMessages.appendChild(typingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return typingDiv;
    }

    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) { // Shift+Enter yeni satÄ±r iÃ§in kalsÄ±n
            e.preventDefault(); // VarsayÄ±lan Enter davranÄ±ÅŸÄ±nÄ± engelle (form gÃ¶nderme vb.)
            sendMessage();
        }
    });

    // Ã–rnek sorulara tÄ±klama Ã¶zelliÄŸi ekle (EÄŸer hoÅŸ geldin ekranÄ±nÄ±z varsa)
    chatMessages.addEventListener('click', (event) => {
        if (event.target.closest('.example-card p')) {
            userInput.value = event.target.closest('.example-card p').textContent.replace(/"/g, '');
            sendMessage();
        } else if (event.target.tagName === 'LI' && event.target.closest('.examples ul')) {
            userInput.value = event.target.textContent.replace(/"/g, '');
            sendMessage();
        }
    });
});
